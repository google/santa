syntax = "proto3";

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

option objc_class_prefix = "SNTPB";

package santa.pb;

message UserInfo {
  int32 uid = 1;
  string name = 2;
}

message GroupInfo {
  int32 gid = 1;
  string name = 2;
}

message ProcessID {
  int32 pid = 1;
  int32 pidversion = 2;
}

message CodeSignature {
  bytes cdhash = 1;
  string signing_id = 2;
  string team_id = 3;
}

message Stat {
  int32 dev = 1;
  uint32 mode = 2;
  uint32 nlink = 3;
  uint64 ino = 4;
  UserInfo user = 5;
  GroupInfo group = 6;
  int32 rdev = 7;
  google.protobuf.Timestamp access_time = 8;
  google.protobuf.Timestamp modification_time = 9;
  google.protobuf.Timestamp change_time = 10;
  google.protobuf.Timestamp birth_time = 11;
  int64 size = 12;
  int64 blocks = 13;
  int32 blksize = 14;
  uint32 flags = 15;
  int32 gen = 16;
}

message Hash {
  enum HashAlgo {
    HASH_ALGO_UNKNOWN = 0;
    HASH_ALGO_MD5 = 1;
    HASH_ALGO_SHA1 = 2;
    HASH_ALGO_SHA256 = 3;
  }

  HashAlgo type = 1;
  string hash = 2;
}

message File {
  string path = 1;
  bool truncated = 2;
  Stat stat = 3;
  Hash hash = 4;
}

message FileDescriptor {
  int32 fd = 1;
  uint32 type = 2;
  uint64 pipe_id = 3;
}

message ProcessInfo {
  ProcessID id = 1;
  ProcessID parent_id = 2;
  ProcessID responsible_id = 3;

  int32 original_parent_pid = 4;
  int32 group_id = 5;
  int32 session_id = 6;
  UserInfo effective_user = 7;
  GroupInfo effective_group = 8;
  UserInfo real_user = 9;
  GroupInfo real_group = 10;

  bool is_platform_binary = 11;
  bool is_es_client = 12;
  CodeSignature code_signature = 13;
  uint32 cs_flags = 14;

  File executable = 15;
  File tty = 16;

  google.protobuf.Timestamp start_time = 17;
}

message CertificateInfo {
  Hash hash = 1;
  string common_name = 2;
}

message Execution {
  ProcessInfo instigator = 1;
  ProcessInfo target = 2;

  File script = 3;
  File workingDirectory = 4;

  repeated string args = 5;
  repeated string envs = 6;
  repeated FileDescriptor fds = 7;

  enum Decision {
    DECISION_UNKNOWN = 0;
    DECISION_ALLOW = 1;
    DECISION_DENY = 2;
  }
  Decision decision = 8;

  enum Reason {
    REASON_UNKNOWN = 0;
    REASON_BINARY = 1;
    REASON_CERT = 2;
    REASON_COMPILER = 3;
    REASON_PENDING_TRANSITIVE = 5;
    REASON_SCOPE = 6;
    REASON_TEAM_ID = 7;
    REASON_TRANSITIVE = 8;
    // TODO: How to report denials from other ES clients
    REASON_OTHER_ES_CLIENT = 9;
  }
  Reason reason = 9;

  enum Mode {
    MODE_UNKNOWN = 0;
    MODE_LOCKDOWN = 1;
    MODE_MONITOR = 2;
  }
  Mode mode = 10;

  CertificateInfo certificate_info = 11;

  string explain = 12;
  string quarantine_url = 13;
  string original_path = 14;
}

message Fork {
  ProcessInfo instigator = 1;
  ProcessInfo child = 2;
}

message Exit {
  ProcessInfo instigator = 1;

  message Exited {
    int32 exit_status = 1;
  }

  message Signaled {
    int32 signal = 1;
  }

  oneof ExitType {
    Exited exited = 2;
    Signaled signaled = 3;
    Signaled stopped = 4;
  }
}

message Open {
  ProcessInfo instigator = 1;
  File target = 2;
  int32 flags = 3;
}

message Close {
  ProcessInfo instigator = 1;
  File target = 2;
  bool modified = 3;
}

// If the destination file already exists, `destination` will be populated
// Else `directory` and `filename` will be provided.
message Rename {
  ProcessInfo instigator = 1;
  File source = 2;
  File destination = 3;
  File destination_directory = 4;
  string destination_filename = 5;
}

message Unlink {
  ProcessInfo instigator = 1;
  File target = 2;
}

message Link {
  ProcessInfo instigator = 1;
  File source = 2;
  File target_directory = 3;
  string target_filename = 4;
}

message Disk {
  enum Action {
    ACTION_UNKNOWN = 0;
    ACTION_APPEARED = 1;
    ACTION_DISAPPEARED = 2;
  }

  Action action = 1;
  string mount = 2;
  string volume = 3;
  string bsd_name = 4;
  string fs = 5;
  string model = 6;
  string serial = 7;
  string bus = 8;
  string dmg_path = 9;
  string appearance = 10;
}

message Bundle {
  // This is the hash of the file within the bundle that triggered the event
  Hash file_hash = 1;
  // This is the hash of the hashes of all executables in the bundle
  Hash bundle_hash = 2;
  string bundle_name = 3;
  string bundle_id = 4;
  string bundle_path = 5;
  string path = 6;
}

message Allowlist {
  int32 pid = 1;
  int32 pidversion = 2;
  string path = 3;
  Hash hash = 4;
}

message SantaMessage {
  // Unique, per-event generated.
  // Can allow client to relate events across time
  string uuid = 1;

  // Timestamp when the event occurred
  google.protobuf.Timestamp event_time = 2;

  // Timestamp when Santa finished processing the event
  google.protobuf.Timestamp processed_time = 3;

  oneof event {
    Execution execution = 10;
    Fork fork = 11;
    Exit exit = 12;
    Open open = 13;
    Close close = 14;
    Rename rename = 15;
    Unlink unlink = 16;
    Link link = 17;
    Disk disk = 18;
    Bundle bundle = 19;
    Allowlist allowlist = 20;
  };
}

message SantaMessageBatch {
  repeated SantaMessage messages = 1;
}

message LogBatch {
  repeated google.protobuf.Any records = 1;
}
