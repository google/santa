// LINT: LEGACY_NAMES

syntax = "proto3";

package santa.sync.v1;

// Note: Many of the enums in this proto file do not conform to protocol buffer
// best practices. The reason for this is that this proto was developed to be
// backward-compatible with an existing JSON API and unlike field names, enum
// values cannot have their JSON representation overridden.

// SantaSync is service used to distribute configuration settings and rules to Santa.
service SantaSync {
  // Preflight is used to send current configuration data to the server and to
  // retrieve new configuration values from the server.
  rpc Preflight(PreflightRequest) returns (PreflightResponse) {}

  // EventUpload sends details about blocked (or would-be-blocked) executions to
  // the server.
  rpc EventUpload(EventUploadRequest) returns (EventUploadResponse) {}

  // RuleDownload retrieves new rules from the server.
  rpc RuleDownload(RuleDownloadRequest) returns (RuleDownloadResponse) {}

  // Postflight sends status data back to the server after applying any new
  // configuration received in the previous stages.
  rpc Postflight(PostflightRequest) returns (PostflightResponse) {}
}

// ClientMode represents the operating mode for an agent.
enum ClientMode {
  UNKNOWN_CLIENT_MODE = 0;
  MONITOR = 1;
  LOCKDOWN = 2;
}

message PreflightRequest {
  string serial_number = 1           [json_name="serial_num"];
  string hostname = 2                [json_name="hostname"];
  string os_version = 3              [json_name="os_version"];
  string os_build = 4                [json_name="os_build"];
  string model_identifier = 5        [json_name="model_identifier"];
  string santa_version = 6           [json_name="santa_version"];
  string primary_user = 7            [json_name="primary_user"];
  string push_notification_token = 8 [json_name="push_notification_token"];

  ClientMode client_mode = 9         [json_name="client_mode"];
  bool request_clean_sync = 10       [json_name="request_clean_sync"];

  uint32 binary_rule_count = 11      [json_name="binary_rule_count"];
  uint32 certificate_rule_count = 12 [json_name="certificate_rule_count"];
  uint32 compiler_rule_count = 13    [json_name="compiler_rule_count"];
  uint32 transitive_rule_count = 14  [json_name="transitive_rule_count"];
  uint32 teamid_rule_count = 15      [json_name="teamid_rule_count"];
  uint32 signingid_rule_count = 16   [json_name="signingid_rule_count"];
  uint32 cdhash_rule_count = 17      [json_name="cdhash_rule_count"];
  // The UUID of the machine that is sending this preflight.
  string machine_id = 18             [json_name="machine_id"];
}

enum SyncType {
  option allow_alias = true;

  // An unspecified SyncType will fallback to default "NORMAL" handling
  SYNC_TYPE_UNSPECIFIED = 0;

  // Standard, progressive sync
  NORMAL = 1;
  normal = 1 [deprecated=true];

  // Delete all non-transitive, previously received rules before applying the newly received rules.
  CLEAN = 2;
  clean = 2 [deprecated=true];

  // Delete all previously received rules before applying the newly received rules.
  CLEAN_ALL = 3;
  clean_all = 3 [deprecated=true];
}

enum FileAccessAction {
  option allow_alias = true;

  // An unspecified FileAccessAction will fallback to not changing any settings on the host
  FILE_ACCESS_ACTION_UNSPECIFIED = 0;

  // The policy will be applied as written
  NONE = 1;
  None = 1 [deprecated=true];

  // Actions that would be denied are logged but allowed
  AUDIT_ONLY = 2;
  AuditOnly = 2 [deprecated=true];

  // No action will be taken
  DISABLE = 3;
  Disable = 3 [deprecated=true];
}

message PreflightResponse {
  // The client mode that the client should move into at the end of this sync.
  // The mode does not change until the Postflight request has been made, to
  // ensure the client has received all the needed rules before potentially going
  // into Lockdown.
  ClientMode client_mode = 1;

  optional SyncType sync_type = 2;

  // Controls how many events Santa should upload in a single EventUpload request.
  // If the server doesn't specify, the default is 50.
  uint32 batch_size = 3;

  // Enable bundle hashing and bundle rules.
  optional bool enable_bundles = 4;

  // Enable transitive (ALLOWLIST_COMPILER) rules.
  // Without this enabled, any received ALLOWLIST_COMPILER rules will be treated as ALLOWLIST.
  optional bool enable_transitive_rules = 5;

  // Ordinarily, Santa will only upload events about executions that are denied or would be denied if the machine
  // were in LOCKDOWN mode. With this enabled, Santa will upload details about all events.
  optional bool enable_all_event_upload = 6;

  // Ordinarily, Santa will only upload events about executions that are denied or would be denied if the machine
  // were in LOCKDOWN mode. With this enabled, Santa will NOT upload events for binaries that would have been blocked in LOCKDOWN.
  optional bool disable_unknown_event_upload = 7;

  // Specifies the time interval in seconds between full syncs. Defaults to 600 (10 minutes). Cannot be set lower than 60.
  uint32 full_sync_interval_seconds = 8 [json_name="full_sync_interval"];

  // When push notifications are enabled, this overrides the full_sync_interval above. It is expected that Santa will not
  // need to perform a full sync as frequently when push notifications are working. Defaults to 14400 (6 hours).
  uint32 push_notification_full_sync_interval_seconds = 9 [json_name="push_notification_full_sync_interval"];

  // The maximum number of seconds Santa can wait before triggering a rule sync after receiving a "global rule sync" notification.
  // As these notifications cause every Santa client to try and sync, we add a random delay to each client to try and spread the
  // load out on the sync server. This defaults to 600 (10 minutes).
  uint32 push_notification_global_rule_sync_deadline_seconds = 10 [json_name="push_notification_global_rule_sync_deadline"];

  // These two regexes are used to allow/block executions whose path matches. The provided regex must conform to ICU format.
  // While this feature can be useful, its use should be very carefully considered as it is much riskier than real rules.
  optional string allowed_path_regex = 11;
  optional string blocked_path_regex = 12;

  // Enable USB mount blocking
  optional bool block_usb_mount = 13;

  // If set, if a mount of a USB device happens and the mount flags match, the mount will be allowed.
  // If the flags do not match, Santa will deny the mount but then remount with the provided flags.
  repeated string remount_usb_mode = 14;

  // Overrides the File Access Authorization (FAA) policy to change the performed action.
  // Allowed values:
  //   `disable`: No action will be taken
  //   `auditonly`: Actions that would be denied are logged but allowed
  //   `none`: The policy will be applied as written
  optional FileAccessAction override_file_access_action = 15;

  // These fields are deprecated forms of other fields and exist here solely for backwards compatibility
  optional bool deprecated_enabled_transitive_whitelisting = 1000 [json_name="enabled_transitive_whitelisting", deprecated=true];
  optional bool deprecated_transitive_whitelisting_enabled = 1001 [json_name="transitive_whitelisting_enabled", deprecated=true];
  optional bool deprecated_bundles_enabled = 1002 [json_name="bundles_enabled", deprecated=true];
  optional uint32 deprecated_fcm_full_sync_interval_seconds = 1003 [json_name="fcm_full_sync_interval", deprecated=true];
  optional uint32 deprecated_fcm_global_rule_sync_deadline_seconds = 1004 [json_name="fcm_global_rule_sync_deadline", deprecated=true];
  optional string deprecated_whitelist_regex = 1005 [json_name="whitelist_regex", deprecated=true];
  optional string deprecated_blacklist_regex = 1006 [json_name="blacklist_regex", deprecated=true];

  // Deprecated but still supported key that acts like sync_type was set to "CLEAN" unless
  // the client had requested a clean sync, in which case it acts like "CLEAN_ALL"
  optional bool deprecated_clean_sync = 1007 [json_name="clean_sync", deprecated=true];
}

enum Decision {
  DECISION_UNKNOWN = 0;
  ALLOW_UNKNOWN = 1;
  ALLOW_BINARY = 2;
  ALLOW_CERTIFICATE = 3;
  ALLOW_SCOPE = 4;
  ALLOW_TEAMID = 5;
  ALLOW_SIGNINGID = 6;
  ALLOW_CDHASH = 7;
  BLOCK_UNKNOWN = 8;
  BLOCK_BINARY = 9;
  BLOCK_CERTIFICATE = 10;
  BLOCK_SCOPE = 11;
  BLOCK_TEAMID = 12;
  BLOCK_SIGNINGID = 13;
  BLOCK_CDHASH = 14;
  BUNDLE_BINARY = 15;
}

message Certificate {
  string sha256 = 1;
  string cn = 2;
  string org = 3;
  string ou = 4;
  uint32 valid_from = 5   [json_name="valid_from"];
  uint32 valid_until = 6  [json_name="valid_until"];
}

message Event {
  string file_sha256 = 1                        [json_name="file_sha256"];
  string file_path = 2                          [json_name="file_path"];
  string file_name = 3                          [json_name="file_name"];
  string executing_user = 4                     [json_name="executing_user"];
  double execution_time = 5                     [json_name="execution_time"];
  repeated string logged_in_users = 6           [json_name="logged_in_users"];
  repeated string current_sessions = 7          [json_name="current_sessions"];
  Decision decision = 8                         [json_name="decision"];

  string file_bundle_id = 9                     [json_name="file_bundle_id"];
  string file_bundle_path = 10                  [json_name="file_bundle_path"];
  string file_bundle_executable_rel_path = 11   [json_name="file_bundle_executable_rel_path"];
  string file_bundle_name = 12                  [json_name="file_bundle_name"];
  string file_bundle_version = 13               [json_name="file_bundle_version"];
  string file_bundle_version_string = 14        [json_name="file_bundle_version_string"];
  string file_bundle_hash = 15                  [json_name="file_bundle_hash"];
  uint32 file_bundle_hash_millis = 16           [json_name="file_bundle_hash_millis"];
  uint32 file_bundle_binary_count = 17          [json_name="file_bundle_binary_count"];

  // pid_t is an int32
  int32 pid = 18                                [json_name="pid"];
  int32 ppid = 19                               [json_name="ppid"];
  string parent_name = 20                       [json_name="parent_name"];

  string team_id = 21                           [json_name="team_id"];
  string signing_id = 22                        [json_name="signing_id"];
  string cdhash = 23                            [json_name="cdhash"];

  string quarantine_data_url = 24               [json_name="quarantine_data_url"];
  string quarantine_referer_url = 25            [json_name="quarantine_referer_url"];
  // Seconds since UNIX epoch. This field would ideally be an int64 but the protobuf library
  // encodes that as a string, unlike NSJSONSerialization
  uint32 quarantine_timestamp = 26              [json_name="quarantine_timestamp"];
  string quarantine_agent_bundle_id = 27        [json_name="quarantine_agent_bundle_id"];

  repeated Certificate signing_chain = 28       [json_name="signing_chain"];
}

message EventUploadRequest {
  repeated Event events = 1                     [json_name="events"];
  // The UUID of the machine where the event(s) occurred
  string machine_id = 2                         [json_name="machine_id"];
}

message EventUploadResponse {
  // A list of SHA-256's of bundle binaries that need to be uploaded.
  repeated string event_upload_bundle_binaries = 1;
}

enum Policy {
  option allow_alias = true;

  POLICY_UNKNOWN = 0;
  ALLOWLIST = 1;
  ALLOWLIST_COMPILER = 2;
  BLOCKLIST = 3;
  SILENT_BLOCKLIST = 4;
  REMOVE = 5;

  // These enum values are deprecated and remain here for backward compatibility.
  WHITELIST = 1;
  WHITELIST_COMPILER = 2;
  BLACKLIST = 3;
  SILENT_BLACKLIST = 4;
}

enum RuleType {
  RULETYPE_UNKNOWN = 0;
  BINARY = 1;
  CERTIFICATE = 2;
  TEAMID = 3;
  SIGNINGID = 4;
  CDHASH = 5;
}

message Rule {
  string identifier = 1;
  Policy policy = 2;
  RuleType rule_type = 3;

  // For BLOCK_* rules, this will override the default block message shown to users.
  string custom_msg = 4;

  // For BLOCK_* rules, this will override the URL used by the "Open" button in the UI.
  // The same format values used by the EventDetailURL configuration value can be used here.
  // See: https://santa.dev/deployment/configuration#eventdetailurl
  string custom_url = 5;

  // These two fields are used for bundle binaries.
  string file_bundle_hash = 6;
  uint32 file_bundle_binary_count = 7;

  string deprecated_sha256 = 1000 [json_name="sha256", deprecated=true];  // Use identifier instead
}

message RuleDownloadRequest {
  string cursor = 1       [json_name="cursor"];
  // The UUID of the machine that is requesting the rules.
  string machine_id = 2   [json_name="machine_id"];
}

message RuleDownloadResponse {
  repeated Rule rules = 1;
  string cursor = 2;
}

message PostflightRequest {
  uint32 rules_received = 1   [json_name="rules_received"];
  uint32 rules_processed = 2  [json_name="rules_processed"];
  // The UUID of the machine that is sending this postflight.
  string machine_id = 3       [json_name="machine_id"];
}

message PostflightResponse { }

